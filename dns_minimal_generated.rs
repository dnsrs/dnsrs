// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod dns {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod storage {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RECORD_TYPE: u16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RECORD_TYPE: u16 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RECORD_TYPE: [RecordType; 4] = [
  RecordType::UNKNOWN,
  RecordType::A,
  RecordType::NS,
  RecordType::CNAME,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RecordType(pub u16);
#[allow(non_upper_case_globals)]
impl RecordType {
  pub const UNKNOWN: Self = Self(0);
  pub const A: Self = Self(1);
  pub const NS: Self = Self(2);
  pub const CNAME: Self = Self(5);

  pub const ENUM_MIN: u16 = 0;
  pub const ENUM_MAX: u16 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::UNKNOWN,
    Self::A,
    Self::NS,
    Self::CNAME,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::UNKNOWN => Some("UNKNOWN"),
      Self::A => Some("A"),
      Self::NS => Some("NS"),
      Self::CNAME => Some("CNAME"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RecordType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RecordType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RecordType {
    type Output = RecordType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RecordType {
  type Scalar = u16;
  #[inline]
  fn to_little_endian(self) -> u16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u16) -> Self {
    let b = u16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RecordType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RecordType {}
pub enum TestRecordOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TestRecord<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TestRecord<'a> {
  type Inner = TestRecord<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TestRecord<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_RECORD_TYPE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TestRecord { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TestRecordArgs<'args>
  ) -> flatbuffers::WIPOffset<TestRecord<'bldr>> {
    let mut builder = TestRecordBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_record_type(args.record_type);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TestRecord::VT_NAME, None)}
  }
  #[inline]
  pub fn record_type(&self) -> RecordType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RecordType>(TestRecord::VT_RECORD_TYPE, Some(RecordType::UNKNOWN)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TestRecord<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<RecordType>("record_type", Self::VT_RECORD_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct TestRecordArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub record_type: RecordType,
}
impl<'a> Default for TestRecordArgs<'a> {
  #[inline]
  fn default() -> Self {
    TestRecordArgs {
      name: None,
      record_type: RecordType::UNKNOWN,
    }
  }
}

pub struct TestRecordBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TestRecordBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TestRecord::VT_NAME, name);
  }
  #[inline]
  pub fn add_record_type(&mut self, record_type: RecordType) {
    self.fbb_.push_slot::<RecordType>(TestRecord::VT_RECORD_TYPE, record_type, RecordType::UNKNOWN);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TestRecordBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TestRecordBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TestRecord<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TestRecord<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TestRecord");
      ds.field("name", &self.name());
      ds.field("record_type", &self.record_type());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TestRecord`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_test_record_unchecked`.
pub fn root_as_test_record(buf: &[u8]) -> Result<TestRecord, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TestRecord>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TestRecord` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_test_record_unchecked`.
pub fn size_prefixed_root_as_test_record(buf: &[u8]) -> Result<TestRecord, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TestRecord>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TestRecord` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_test_record_unchecked`.
pub fn root_as_test_record_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TestRecord<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TestRecord<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TestRecord` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_test_record_unchecked`.
pub fn size_prefixed_root_as_test_record_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TestRecord<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TestRecord<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TestRecord and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TestRecord`.
pub unsafe fn root_as_test_record_unchecked(buf: &[u8]) -> TestRecord {
  flatbuffers::root_unchecked::<TestRecord>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TestRecord and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TestRecord`.
pub unsafe fn size_prefixed_root_as_test_record_unchecked(buf: &[u8]) -> TestRecord {
  flatbuffers::size_prefixed_root_unchecked::<TestRecord>(buf)
}
#[inline]
pub fn finish_test_record_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TestRecord<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_test_record_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TestRecord<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod storage
}  // pub mod dns

